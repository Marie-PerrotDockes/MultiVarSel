bip <-function (x, plot.type = c("partial", "histogram", "scatter", 
                          "spectrum", "ACF"), points = TRUE, smooth = FALSE, lag.max, na.action = na.contiguous, 
         theme = NULL, ...) 
{
  if (!requireNamespace("ggplot2", quietly = TRUE)) {
    stop("ggplot2 is needed for this function to work. Install it via install.packages(\"ggplot2\")", 
         call. = FALSE)
  }
  else if (!requireNamespace("grid", quietly = TRUE)) {
    stop("grid is needed for this function to work. Install it via install.packages(\"grid\")", 
         call. = FALSE)
  }
  else {
    if (NCOL(x) > 1) 
      stop("ggtsdisplay is only for univariate time series")
    plot.type <- match.arg(plot.type)
    main <- deparse(substitute(x))
    if (!is.ts(x)) {
      x <- ts(x)
    }
    if (missing(lag.max)) {
      lag.max <- round(min(max(10 * log10(length(x)), 3 * 
                                 frequency(x)), length(x)/3))
    }
    dots <- list(...)
    if (is.null(dots$xlab)) 
      dots$xlab <- ""
    if (is.null(dots$ylab)) 
      dots$ylab <- ""
    labs <- match(c("xlab", "ylab", "main"), names(dots), 
                  nomatch = 0)
    gridlayout <- matrix(c(1, 2, 1, 3), nrow = 2)
    grid::grid.newpage()
    grid::pushViewport(grid::viewport(layout = grid::grid.layout(nrow(gridlayout), 
                                                                 ncol(gridlayout))))
    matchidx <- as.data.frame(which(gridlayout == 1, arr.ind = TRUE))
    tsplot <- do.call(ggplot2::autoplot, c(object = quote(x), 
                                           dots[labs]))
    if (points) {
      tsplot <- tsplot + ggplot2::geom_point(size = 0.5)
    }
    if (smooth) {
      tsplot <- tsplot + ggplot2::geom_smooth(method = "loess", 
                                              se = FALSE)
    }
    if (is.null(tsplot$labels$title)) {
      tsplot <- tsplot + ggplot2::ggtitle(main)
    }
    if (!is.null(theme)) {
      tsplot <- tsplot + theme
    }
    print(tsplot, vp = grid::viewport(layout.pos.row = matchidx$row, 
                                      layout.pos.col = matchidx$col))
    acfplot <- do.call(ggAcf, c(x = quote(x), lag.max = lag.max, 
                                na.action = na.action, dots[-labs])) + ggplot2::ggtitle(NULL)
    if (!is.null(theme)) {
      acfplot <- acfplot + theme
    }
    if (plot.type == "partial") {
      lastplot <- ggPacf(x, lag.max = lag.max, na.action = na.action) + 
        ggplot2::ggtitle(NULL)
      acfplotrange <- ggplot2::layer_scales(acfplot)$y$range$range
      pacfplotrange <- ggplot2::layer_scales(lastplot)$y$range$range
      yrange <- range(c(acfplotrange, pacfplotrange))
      acfplot <- acfplot + ggplot2::ylim(yrange)
      lastplot <- lastplot + ggplot2::ylim(yrange)
    }
    else if (plot.type == "histogram") {
      lastplot <- gghistogram(x, add.normal = TRUE, add.rug = TRUE) + 
        ggplot2::xlab(main)
    }
    else if (plot.type == "scatter") {
      scatterData <- data.frame(y = x[2:NROW(x)], x = x[1:NROW(x) - 
                                                          1])
      lastplot <- ggplot2::ggplot(ggplot2::aes_(y = ~y, 
                                                x = ~x), data = scatterData) + ggplot2::geom_point() + 
        ggplot2::labs(x = expression(Y[t - 1]), y = expression(Y[t]))
    }
    else if (plot.type == "spectrum") {
      specData <- spec.ar(x, plot = FALSE)
      specData <- data.frame(spectrum = specData$spec, 
                             frequency = specData$freq)
      lastplot <- ggplot2::ggplot(ggplot2::aes_(y = ~spectrum, 
                                                x = ~frequency), data = specData) + ggplot2::geom_line() + 
        ggplot2::scale_y_log10()
    }
    else if (plot.type == "ACF") {

      lastplot <- acfplot
    }
    if (!is.null(theme)) {
      lastplot <- lastplot + theme
    }
    matchidx <- as.data.frame(which(gridlayout == 2, arr.ind = TRUE))
    print(acfplot, vp = grid::viewport(layout.pos.row = matchidx$row, 
                                       layout.pos.col = matchidx$col))
    matchidx <- as.data.frame(which(gridlayout == 3, arr.ind = TRUE))
    print(lastplot, vp = grid::viewport(layout.pos.row = matchidx$row, 
                                        layout.pos.col = matchidx$col))
  }
}

